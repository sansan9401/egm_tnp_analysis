#############################################################
########## bining definition  [can be nD bining]
#############################################################
#biningDef = [{ 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5,-2.1,-1.80,-1.566,-1.4442,-1.00,-0.60,-0.30, -0.20, 0, 0.20,0.30, 0.60, 1.00, 1.4442, 1.566, 1.80, 2.1, 2.5] },{ 'var' : 'el_pt' , 'type': 'float', 'bins': [10,15,20,25,30,35,40,45,70,100,500] },]
### DEFAULT ###
biningDef = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 15, 20, 25, 30, 35, 40, 45, 70, 100, 500] },
]

### for trigger ###
bin_Ele35 = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 31, 35, 37, 40, 45, 70, 100, 500] },
]
bin_Ele32 = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 28, 31, 33, 35, 40, 45, 70, 100, 500] },
]
bin_Ele28 = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 24, 28, 30, 32, 35, 40, 45, 70, 100, 500] },
]
bin_Ele27 = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 23, 26, 28, 30, 32, 35, 40, 45, 70, 100, 500] },
]
bin_Ele23 = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 19, 23, 25, 27, 30, 35, 40, 45, 70, 100, 500] },
]
bin_Ele12 = [
    { 'var' : 'el_sc_eta' , 'type': 'float', 'bins': [-2.5, -2.1, -1.80, -1.566, -1.4442, -1.1, -0.8, -0.4, 0.0, 0.4, 0.8, 1.1, 1.4442, 1.566, 1.80, 2.1, 2.5] },
    { 'var' : 'el_pt' , 'type': 'float', 'bins': [10, 12, 15, 20, 25, 30, 35, 40, 45, 70, 100, 500] },
]
    


#############################################################
########## Cuts definition for all samples
#############################################################
### cut
#cutBase   = 'tag_Ele_pt > 30 && abs(tag_sc_eta) < 2.1 && el_q*tag_Ele_q < 0'
# can add addtionnal cuts for some bins (first check bin number using tnpEGM --checkBins)
additionalCuts={}
for i in range(36):
    additionalCuts[i]='tag_Ele_trigMVA > 0.92 && sqrt( 2*event_met_pfmet*tag_Ele_pt*(1-cos(event_met_pfphi-tag_Ele_phi))) < 45'
tight_mcTrue='( el_pt<20 ? (el_et/mc_probe_et>0.8 && el_et/mc_probe_et < 1.2 && (el_eta-mc_probe_eta)*(el_eta-mc_probe_eta)+(el_phi-mc_probe_phi)*(el_phi-mc_probe_phi)<0.0004 ) : 1)'
#############################################################
########## fitting params to tune fit by hand if necessary
#############################################################
tnpParNomFit = [
    "meanP[-0.0,-5.0,5.0]","sigmaP[0.5,0.02,4.0]",
    "meanF[-0.0,-5.0,5.0]","sigmaF[0.5,0.02,4.0]",
    "acmsP[60.,50.,80.]","betaP[0.05,0.01,0.08]","gammaP[0.1, 0, 1]","peakP[90.0]",
    "acmsF[60.,50.,80.]","betaF[0.05,0.01,0.08]","gammaF[0.1, 0, 1]","peakF[90.0]",
    ]

tnpParAltSigFit = [
    "meanP[-0.0,-5.0,5.0]","sigmaP[1,0.7,6.0]","alphaP[2.0,1.2,3.5]" ,'nP[3,-5,5]',"sigmaP_2[1.5,0.5,6.0]","sosP[1,0.5,5.0]",
    "meanF[-0.0,-5.0,5.0]","sigmaF[2,0.7,15.0]","alphaF[2.0,1.2,3.5]",'nF[3,-5,5]',"sigmaF_2[2.0,0.5,6.0]","sosF[1,0.5,5.0]",
    "acmsP[60.,50.,75.]","betaP[0.04,0.01,0.06]","gammaP[0.1, 0.005, 1]","peakP[90.0]",
    "acmsF[60.,50.,75.]","betaF[0.04,0.01,0.06]","gammaF[0.1, 0.005, 1]","peakF[90.0]",
    ]
     
tnpParAltBkgFit = [
    "meanP[-0.0,-5.0,5.0]","sigmaP[0.5,0.02,4.0]",
    "meanF[-0.0,-5.0,5.0]","sigmaF[0.5,0.02,4.0]",
    "alphaP[0.,-5.,5.]",
    "alphaF[0.,-5.,5.]",
    ]
